<?xml version="1.0" encoding="UTF-8"?>
<project name="ejbca-ws" default="build">
    <description>
        The EJBCA Web Services web application.
    </description>

    <dirname property="ejbca-ws.dir" file="${ant.file.ejbca-ws}"/>

    <import file="${ejbca-ws.dir}/../build-helpers.xml"/>

    <property name="ejbca-ws.build.dir" location="${ejbca-ws.dir}/build"/>
    <property name="ejbca-ws.build-test.dir" location="${ejbca-ws.dir}/build-test"/>
    <property name="ejbca-ws.build-lib.dir" location="${ejbca-ws.dir}/build-lib"/>
    <property name="ejbca-ws.build-lib-gen.dir" location="${ejbca-ws.dir}/build-lib-gen"/>
    <property name="ejbca-ws.src.dir" location="${ejbca-ws.dir}/src"/>
    <property name="ejbca-ws.src-test.dir" location="${ejbca-ws.dir}/src-test"/>

    <property name="ejbca-ws.src-gen.dir" location="${ejbca-ws-cli.dir}/src-gen"/>

    <path id="compile.classpath">
        <path refid="compile-library.classpath"/>
        <path refid="lib.ejbca-common-web.classpath"/>
        <path refid="lib.jee.classpath"/>
        <path refid="lib.servlet.classpath"/>
        <path refid="lib.log4j.classpath"/>
        <path refid="lib.commons-lang.classpath"/>
        <path refid="lib.cert-cvc.classpath"/>
        <path refid="lib.jakarta.xml.ws-api.classpath"/>
        <path refid="lib.jakarta.jws-api.classpath"/>
        <path location="${mod.cesecore-entity.lib}"/>
        <path location="${mod.cesecore-common.lib}"/>
        <path refid="lib.x509-common-util.classpath"/>
        <path refid="lib.cryptotokens.classpath"/>
        <path location="${mod.cesecore-ejb-interface.lib}"/>
        <path location="${mod.edition-specific-interface.lib}"/>
        <path location="${mod.edition-specific-ejb.lib}"/>
    </path>

    <path id="compile-test.classpath">
        <path location="${ejbca-ws.build-test.dir}"/>
        <path refid="compile.classpath"/>
        <path refid="lib.junit.classpath"/>
    </path>

    <path id="test.classpath">
        <path refid="compile-test.classpath"/>
        <path refid="lib.jee-client.classpath"/>
    </path>

    <path id="compile-library.classpath">
        <path refid="lib.ejbca-common.classpath"/>
        <path refid="lib.jee.classpath"/>
        <path refid="lib.bouncycastle.classpath"/>
        <path refid="lib.jakarta.xml.ws-api.classpath"/>
        <path location="${mod.cesecore-entity.lib}"/>
        <path location="${mod.cesecore-common.lib}"/>
        <path refid="lib.x509-common-util.classpath"/>
        <path location="${mod.cesecore-ejb-interface.lib}"/>
        <path location="${mod.edition-specific-interface.lib}"/>
        <path location="${mod.edition-specific-ejb.lib}"/>
    </path>

    <path id="generate.classpath">
        <path refid="lib.cert-cvc.classpath"/>
        <path refid="lib.jee.classpath"/>
        <path refid="lib.bouncycastle.classpath"/>
        <path refid="lib.log4j.classpath"/>
        <path refid="lib.commons-lang.classpath"/>
        <path refid="lib.servlet.classpath"/>
        <path refid="lib.ejbca-common-web.classpath"/>
        <path refid="lib.x509-common-util.classpath"/>
        <path refid="lib.cryptotokens.classpath"/>
        <path refid="wsgen.classpath"/>
    </path>

    <path id="wsdl-generate.classpath">
        <path refid="generate.classpath"/>
        <pathelement location="${ejbca-ws.build.dir}"/>
    </path>

    <target name="build" description="Build this module" depends="build-ejb-jar, build-jar"/>

    <target name="build-ejb-jar" description="Build the EJB JAR that handles Web Services in EJBCA" depends="compile">
        <dirname file="${mod.ejbca-ws-ejb.jar}" property="mod.ejbca-ws-ejb.jar.dir"/>
        <mkdir dir="${mod.ejbca-ws-ejb.jar.dir}"/>
        <jar destfile="${mod.ejbca-ws-ejb.jar}" basedir="${ejbca-ws.build.dir}">
            <fileset dir="${ejbca-ws.dir}/resources" includes="**"/>
            <!-- Do not include classes that are included in ejbca-ws.jar -->
            <exclude name="org/ejbca/core/protocol/ws/common/*.class"/>
            <exclude name="org/ejbca/core/protocol/ws/objects/*.class"/>
        </jar>
    </target>

    <target name="build-jar" description="Build EJBCA WS common library" depends="compile-library">
        <dirname file="${mod.ejbca-ws.lib}" property="mod.ejbca-ws.lib.dir"/>
        <mkdir dir="${mod.ejbca-ws.lib.dir}"/>
        <jar destfile="${mod.ejbca-ws.lib}" basedir="${ejbca-ws.build-lib.dir}"/>
    </target>

    <target name="clean" description="Clean up this module">
        <delete dir="${ejbca-ws.build.dir}"/>
        <delete dir="${ejbca-ws.build-test.dir}"/>
        <delete dir="${ejbca-ws.build-lib.dir}"/>
        <delete dir="${ejbca-ws.build-lib-gen.dir}"/>
        <delete dir="${mod.ejbca-ws-gen.dir}"/>
        <delete file="${mod.ejbca-ws.war}"/>
        <delete file="${mod.ejbca-ws.lib}"/>
        <delete file="${mod.ejbca-ws.wsdl}"/>
        <delete file="${mod.ejbca-ws.wsdl-schema}"/>
    </target>

    <target name="compile" depends="">
        <mkdir dir="${mod.dist.path}"/>
        <mkdir dir="${ejbca-ws.build.dir}"/>
        <javac destdir="${ejbca-ws.build.dir}" debug="on" includeantruntime="no"
               encoding="UTF-8" target="${java.target.version}" classpathref="compile.classpath">
            <src path="${ejbca-ws.src.dir}"/>
        </javac>
    </target>

    <target name="compile-library" depends="">
        <mkdir dir="${ejbca-ws.build-lib.dir}"/>
        <javac destdir="${ejbca-ws.build-lib.dir}" debug="on" includeantruntime="no" srcdir="${ejbca-ws.src.dir}"
               encoding="UTF-8" target="${java.target.version}" classpathref="compile-library.classpath">
            <include name="org/ejbca/core/protocol/ws/common/*.java"/>
            <include name="org/ejbca/core/protocol/ws/objects/*.java"/>
        </javac>
    </target>

    <target name="generate-wsdl" depends="compile">
        <pathconvert property="wsdl-generate.classpath-string" refid="wsdl-generate.classpath"/>
        <mkdir dir="${mod.dist.path}"/>
        <mkdir dir="${mod.ejbca-ws-gen.dir}"/>
        <!-- Create a temporary directory, because we're going to want to repackage the generated files -->
        <mkdir dir="${ejbca-ws.dir}/temp"/>

        <!-- Generate a WSDL file that can be used for client stub generation -->

        <taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen" classpathref="wsgen.classpath"/>
        <wsgen
                sei="org.ejbca.core.protocol.ws.EjbcaWS"
                resourcedestdir="${mod.dist.path}"
                genwsdl="true"
                xnocompile="true"
                verbose="true"
                keep="true"
                sourcedestdir="${ejbca-ws.dir}/temp">
            <classpath>
                <path refid="wsdl-generate.classpath"/>
                <path refid="wsgen.classpath"/>
            </classpath>
        </wsgen>

        <!-- Copy over the generated files from wsgen and set the package name.
             We're going to need these repackages JAVA files when generating the client library from ejbca-ws-cli -->
        <copy overwrite="true"
              todir="${mod.ejbca-ws-gen.dir}/org/ejbca/core/protocol/ws/client/gen">
            <fileset dir="${ejbca-ws.dir}/temp/org/ejbca/core/protocol/ws/jaxws">
                <include name="**/*.java"/>
            </fileset>
        </copy>
        <replace
                token="package org.ejbca.core.protocol.ws.jaxws;"
                value="package org.ejbca.core.protocol.ws.client.gen;">
            <fileset dir="${mod.ejbca-ws-gen.dir}/org/ejbca/core/protocol/ws/client/gen/">
                <include name="**/*.java"/>
            </fileset>
        </replace>

        <!-- Delete the tmp dir -->
        <delete dir="${ejbca-ws.dir}/temp" includeemptydirs="true"/>
    </target>

    <target name="compile-tests" depends="build">
        <mkdir dir="${ejbca-ws.build-test.dir}"/>
        <javac srcdir="${ejbca-ws.src-test.dir}" destdir="${ejbca-ws.build-test.dir}" debug="on" includeantruntime="no"
               encoding="UTF-8" target="${java.target.version}" classpathref="compile-test.classpath">
            <src path="${ejbca-ws.src.dir}"/>
        </javac>
        <copy file="${log4j.test.file}" tofile="${ejbca-ws.build-test.dir}/log4j.xml" failonerror="true"/>
    </target>

    <target name="test:system" depends="compile-tests" description="Run system tests for this module">
        <antcall target="showtime" inheritall="true" inheritrefs="true"/>
        <condition property="remoteDebugJvmArgs"
                   value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8787"
                   else="-ea">
            <istrue value="${remoteDebug}"/>
        </condition>
        <junit printsummary="yes" haltonfailure="no" showoutput="${test.showoutput}" dir="${ejbca-ws.dir}"
               fork="true" forkmode="once">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${reports.dir}">
                <fileset dir="${ejbca-ws.build-test.dir}" includes="**/*SystemTest.class"/>
            </batchtest>
            <jvmarg line="${tests.jvmargs}"/>
            <jvmarg value="${remoteDebugJvmArgs}"/>
        </junit>
        <antcall target="showtime" inheritall="true" inheritrefs="true"/>
    </target>

    <target name="runone" depends="compile-tests">
        <fail message="'test.runone' is not set. Example -Dtest.runone=SomeTest . You can also use -Dtest.showoutput=true to send test output to console."
              unless="test.runone"/>
        <condition property="remoteDebugJvmArgs"
                   value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8787"
                   else="-ea">
            <istrue value="${remoteDebug}"/>
        </condition>
        <junit printsummary="yes" haltonfailure="no" showoutput="${test.showoutput}">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${reports.dir}">
                <fileset dir="${ejbca-ws.build-test.dir}" includes="**/${test.runone}.class"/>
            </batchtest>
            <jvmarg line="${tests.jvmargs}"/>
            <jvmarg value="${remoteDebugJvmArgs}"/>
        </junit>
    </target>
</project>
